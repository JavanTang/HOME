# 工作流名称
name: 基础测试

# 触发条件
on:
  push:
    branches: [ main,dev ]  # 只在推送到main分支时触发
  workflow_dispatch:    # 允许手动触发

# 定义工作
jobs:
  # 语法检查
  lint:
    name: 脚本语法检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: Shell脚本检查
        uses: ludeeus/action-shellcheck@master
        with:
          scandir: '.'
          severity: error

  # 基础环境测试
  test-environment:
    name: 基础环境测试
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 准备测试文件
        run: |
          # 创建测试用的环境变量文件
          echo "TEST_USERNAME=testuser" > .env
          echo "TEST_PASSWORD=testpass123" >> .env
          echo "SSH_PUBLIC_KEY_PATH=/root/id_rsa.pub" >> .env
          echo "SSR_SETTING_URL=https://example.com/test" >> .env
          echo "SSR_PORT=1080" >> .env
          echo "HTTP_PROXY_PORT=7890" >> .env

          # 生成测试用的SSH密钥
          mv id_rsa.pub .
          mv id_rsa .

      - name: 构建Docker镜像
        run: docker build -t init-env-test .

      - name: 检查基础命令
        run: |
          echo "=== 检查基础命令 ==="
          docker run --rm init-env-test bash -c "
            command -v wget && \
            command -v git && \
            command -v curl && \
            command -v fish && \
            command -v sudo && \
            command -v htop && \
            command -v pip3
          "

      - name: 检查基础文件
        run: |
          echo "=== 检查基础文件 ==="
          docker run --rm init-env-test bash -c "
            test -f /root/init_env.sh && \
            test -f /root/.env && \
            test -f /root/id_rsa.pub
          "

  # 功能测试
  test-functionality:
    name: 功能测试
    needs: test-environment
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 准备测试环境
        run: |
          # 创建测试用的环境变量文件
          echo "TEST_USERNAME=testuser" > .env
          echo "TEST_PASSWORD=testpass123" >> .env
          echo "SSH_PUBLIC_KEY_PATH=/root/id_rsa.pub" >> .env
          echo "SSR_SETTING_URL=https://example.com/test" >> .env
          echo "SSR_PORT=1080" >> .env
          echo "HTTP_PROXY_PORT=7890" >> .env

          # 生成测试用的SSH密钥
          ssh-keygen -t rsa -f id_rsa -N ""
          mv id_rsa.pub .

          # 构建Docker镜像
          docker build -t init-env-test .

      - name: 测试用户创建和认证
        run: |
          docker run --rm init-env-test bash -c "
            cd /root && \
            chmod +x init_env.sh && \
            ./init_env.sh testuser testpass123 && \
            echo '=== 验证用户创建 ===' && \
            id testuser && \
            echo 'testpass123' | su - testuser -c 'echo \"用户登录成功\"'
          "

      - name: 测试SSH配置
        run: |
          docker run --rm init-env-test bash -c "
            echo '=== 验证SSH配置 ===' && \
            su - testuser -c '
              test -d ~/.ssh && \
              test -f ~/.ssh/authorized_keys && \
              stat -c %a ~/.ssh | grep -q 700 && \
              stat -c %a ~/.ssh/authorized_keys | grep -q 600
            '
          "

      - name: 测试Python环境
        run: |
          docker run --rm init-env-test bash -c "
            echo '=== 验证Python环境 ===' && \
            su - testuser -c '
              test -d ~/miniconda3 && \
              test -f ~/miniconda3/bin/conda && \
              ~/miniconda3/bin/conda --version
            '
          "

      - name: 测试Shell配置
        run: |
          docker run --rm init-env-test bash -c "
            echo '=== 验证Shell配置 ===' && \
            grep -q 'fish$' /etc/passwd && \
            su - testuser -c '
              test -f ~/.config/fish/config.fish && \
              fish -c \"type fish_greeting\"
            '
          "
